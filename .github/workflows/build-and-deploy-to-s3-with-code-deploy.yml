name: Build and Deploy to S3 with CodeDeploy

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET: ${{ secrets.S3_BUCKET }}                    # S3 Î≤ÑÌÇ∑Î™Ö
  CODEDEPLOY_APP: ${{ secrets.CODEDEPLOY_APP }}          # Í∏∞Ï°¥Ïóê ÏÉùÏÑ±Îêú CodeDeploy Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÎ™Ö
  CODEDEPLOY_GROUP: ${{ secrets.CODEDEPLOY_GROUP }}      # Í∏∞Ï°¥Ïóê ÏÉùÏÑ±Îêú CodeDeploy Î∞∞Ìè¨ Í∑∏Î£πÎ™Ö

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    # daycan-back ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú ÏûëÏóÖ (Î£®Ìä∏ Gradle ÌîÑÎ°úÏ†ùÌä∏)
    defaults:
      run:
        working-directory: daycan-back/api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Amazon Corretto 17
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: |
          if [ -f gradlew ]; then
            chmod +x gradlew
            echo "‚úÖ Made gradlew executable"
          else
            echo "‚ùå gradlew not found in current directory"
            exit 1
          fi

      - name: Build with Gradle
        run: |
          echo "üî® Building Spring Boot application (api module)..."
          ./gradlew clean bootJar
          echo "‚úÖ Build completed successfully!"

      - name: Check build artifacts
        run: |
          echo "üì¶ Checking build artifacts..."
          ls -la build/libs/
          JAR_FILE=$(ls -t build/libs/*.jar | grep -v 'plain.jar' | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå No JAR file found!"
            exit 1
          fi
          echo "‚úÖ Found JAR file: $JAR_FILE"
          JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
          echo "üìè JAR file size: $JAR_SIZE"

      - name: Prepare CodeDeploy bundle
        run: |
          echo "üìã Preparing CodeDeploy deployment bundle..."
          # ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÏôÄ Ïª§Î∞ã Ìï¥ÏãúÎ°ú Í≥†Ïú†Ìïú Î∞∞Ìè¨ ID ÏÉùÏÑ±
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          COMMIT_HASH=${GITHUB_SHA::7}
          JAR_FILE=$(ls -t build/libs/*.jar | grep -v 'plain.jar' | head -n 1)
          
          # Î∞∞Ìè¨ Î≤àÎì§ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
          mkdir -p deployment-bundle/app
          mkdir -p deployment-bundle/scripts
          
          # JAR ÌååÏùºÏùÑ app.jarÎ°ú Î≥µÏÇ¨
          cp "$JAR_FILE" deployment-bundle/app/app.jar
          echo "‚úÖ Copied JAR file to deployment bundle"
          
          # appspec.ymlÍ≥º scripts Î≥µÏÇ¨ (ÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú)
          cp ../appspec.yml deployment-bundle/
          cp -r ../scripts/* deployment-bundle/scripts/
          echo "‚úÖ Copied appspec.yml and scripts"
          
          # Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
          chmod +x deployment-bundle/scripts/*.sh
          
          # Î∞∞Ìè¨ Î≤àÎì§ ÏïïÏ∂ï
          BUNDLE_NAME="daycan-back-${TIMESTAMP}-${COMMIT_HASH}.zip"
          cd deployment-bundle
          zip -r "../$BUNDLE_NAME" .
          cd ..
          
          echo "UPLOAD_FILE=$BUNDLE_NAME" >> $GITHUB_ENV
          echo "S3_KEY=deploy/daycan-back/$BUNDLE_NAME" >> $GITHUB_ENV
          echo "DEPLOYMENT_ID=${TIMESTAMP}-${COMMIT_HASH}" >> $GITHUB_ENV
          echo "‚úÖ CodeDeploy bundle prepared: $BUNDLE_NAME"

      # ÌÖåÏä§Ìä∏Ïö©: Access Key Î∞©Ïãù (Ïö¥ÏòÅÌôòÍ≤ΩÏóêÏÑúÎäî OIDC Í∂åÏû•)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload deployment bundle to S3
        run: |
          echo "üì§ Uploading deployment bundle to S3..."
          aws s3 cp "$UPLOAD_FILE" "s3://${S3_BUCKET}/${S3_KEY}"
          echo "‚úÖ Successfully uploaded to: s3://${S3_BUCKET}/${S3_KEY}"
          
          # ÏóÖÎ°úÎìú ÌôïÏù∏
          aws s3 ls "s3://${S3_BUCKET}/${S3_KEY}" --human-readable

      - name: Create CodeDeploy deployment
        id: deploy
        run: |
          echo "üöÄ Creating CodeDeploy deployment..."
          DEPLOYMENT_ID_RESULT=$(aws deploy create-deployment \
            --application-name "${CODEDEPLOY_APP}" \
            --deployment-group-name "${CODEDEPLOY_GROUP}" \
            --revision "revisionType=S3,s3Location={bucket=${S3_BUCKET},key=${S3_KEY},bundleType=zip}" \
            --description "Deploy ${GITHUB_SHA} from ${GITHUB_REF_NAME} (${DEPLOYMENT_ID})" \
            --query "deploymentId" --output text)
          
          echo "CODEDEPLOY_ID=$DEPLOYMENT_ID_RESULT" | tee -a $GITHUB_ENV
          echo "deployment_id=$DEPLOYMENT_ID_RESULT" >> $GITHUB_OUTPUT
          echo "‚úÖ CodeDeploy deployment created: $DEPLOYMENT_ID_RESULT"

      - name: Wait for deployment to complete
        run: |
          set -e
          CODEDEPLOY_ID="${CODEDEPLOY_ID:?missing}"
          echo "‚è≥ Waiting for CodeDeploy deployment: $CODEDEPLOY_ID"
          
          # ÏµúÎåÄ 20Î∂Ñ ÎåÄÍ∏∞ (120 * 10s)
          for i in $(seq 1 120); do
            STATUS=$(aws deploy get-deployment --deployment-id "$CODEDEPLOY_ID" \
              --query "deploymentInfo.status" --output text)
            echo "[$i/120] Deployment Status: $STATUS"
            
            case "$STATUS" in
              Succeeded)
                echo "üéâ Deployment completed successfully!"
                exit 0
                ;;
              Failed|Stopped)
                echo "‚ùå Deployment $STATUS"
                echo "üìã Deployment details:"
                aws deploy get-deployment --deployment-id "$CODEDEPLOY_ID" \
                  --query "deploymentInfo.errorInformation" --output table || true
                exit 1
                ;;
              *)
                sleep 10
                ;;
            esac
          done
          
          echo "‚è∞ Timeout waiting for deployment to complete"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "üéØ Deployment Summary:"
          echo "- Application: ${CODEDEPLOY_APP}"
          echo "- Deployment Group: ${CODEDEPLOY_GROUP}"
          echo "- Deployment ID: ${CODEDEPLOY_ID:-N/A}"
          echo "- S3 Bundle: s3://${S3_BUCKET}/${S3_KEY}"
          echo "- Build Time: $(date)"
          echo "- Commit: ${GITHUB_SHA}"
          echo "- Branch: ${GITHUB_REF_NAME}"

      - name: Show deployment details on failure
        if: failure()
        run: |
          if [ -n "${CODEDEPLOY_ID:-}" ]; then
            echo "üîç Deployment failure details:"
            aws deploy get-deployment --deployment-id "$CODEDEPLOY_ID" || true
            
            echo "üìú Recent deployment events:"
            aws deploy list-deployment-instances --deployment-id "$CODEDEPLOY_ID" \
              --query "instancesList" --output table || true
          fi

